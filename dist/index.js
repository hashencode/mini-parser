"use strict";const e="area,base,canvas,embed,frame,head,iframe,input,link,map,meta,param,rp,script,source,style,textarea,title,track,wbr".split(","),t="area,base,br,col,circle,ellipse,embed,frame,hr,img,input,line,link,meta,param,path,polygon,rect,source,track,use,wbr".split(","),s="address,article,aside,blockquote,dd,div,dl,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ol,p,pre,section,table,ul".split(","),i={img:"image",video:"video",a:"link"},g=Object.keys(i),n={timeout:2e3,ignoredElement:e,delay:0,image:{defaultClass:"mini-parser-image",buildInAttrs:{mode:"scaleToFill",webp:!1,lazyLoad:!1,showMenu:!1}},text:{defaultClass:"mini-parser-text",buildInAttrs:{decode:!1,userSelect:!1}},video:{defaultClass:"mini-parser-video",buildInAttrs:{autoplay:!1,controls:!0,enablePlayGesture:!1,enableProgressGesture:!0,loop:!1,muted:!1,objectFit:"contain",playBtnPosition:"bottom",showCastingButton:!1,showCenterPlayBtn:!0,showFullscreenBtn:!0,showMuteBtn:!1,showPlayBtn:!0,showProgress:!0,vslideGesture:!1,vslideGestureInFullscreen:!0}},view:{defaultClass:"mini-parser-view"},link:{defaultClass:"mini-parser-link"}},r=/^<([-A-Za-z0-9_]+)((?:\s+[a-zA-Z_:][-a-zA-Z0-9_:.]*(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/,a=/^<\/([-A-Za-z0-9_]+)[^>]*>/,o=/^<([-A-Za-z0-9_]+)((?:\s+[a-zA-Z_:][-a-zA-Z0-9_:.]*(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/)>/,l=/([a-zA-Z_:][-a-zA-Z0-9_:.]*)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/g,u=[[/<\?xml.*\?>\n/,""],[/<.*!doctype.*\>\n/,""],[/<.*!DOCTYPE.*\>\n/,""],[/\r?\n+/g,""],[/<!--.*?-->/gi,""],[/\/\*.*?\*\//gi,""],[/[ ]+</gi,"<"],[/&forall;/g,"∀"],[/&part;/g,"∂"],[/&exists;/g,"∃"],[/&empty;/g,"∅"],[/&nabla;/g,"∇"],[/&isin;/g,"∈"],[/&notin;/g,"∉"],[/&ni;/g,"∋"],[/&prod;/g,"∏"],[/&sum;/g,"∑"],[/&minus;/g,"−"],[/&lowast;/g,"∗"],[/&radic;/g,"√"],[/&prop;/g,"∝"],[/&infin;/g,"∞"],[/&ang;/g,"∠"],[/&and;/g,"∧"],[/&or;/g,"∨"],[/&cap;/g,"∩"],[/&cap;/g,"∪"],[/&int;/g,"∫"],[/&there4;/g,"∴"],[/&sim;/g,"∼"],[/&cong;/g,"≅"],[/&asymp;/g,"≈"],[/&ne;/g,"≠"],[/&le;/g,"≤"],[/&ge;/g,"≥"],[/&sub;/g,"⊂"],[/&sup;/g,"⊃"],[/&nsub;/g,"⊄"],[/&sube;/g,"⊆"],[/&supe;/g,"⊇"],[/&oplus;/g,"⊕"],[/&otimes;/g,"⊗"],[/&perp;/g,"⊥"],[/&sdot;/g,"⋅"],[/&Alpha;/g,"Α"],[/&Beta;/g,"Β"],[/&Gamma;/g,"Γ"],[/&Delta;/g,"Δ"],[/&Epsilon;/g,"Ε"],[/&Zeta;/g,"Ζ"],[/&Eta;/g,"Η"],[/&Theta;/g,"Θ"],[/&Iota;/g,"Ι"],[/&Kappa;/g,"Κ"],[/&Lambda;/g,"Λ"],[/&Mu;/g,"Μ"],[/&Nu;/g,"Ν"],[/&Xi;/g,"Ν"],[/&Omicron;/g,"Ο"],[/&Pi;/g,"Π"],[/&Rho;/g,"Ρ"],[/&Sigma;/g,"Σ"],[/&Tau;/g,"Τ"],[/&Upsilon;/g,"Υ"],[/&Phi;/g,"Φ"],[/&Chi;/g,"Χ"],[/&Psi;/g,"Ψ"],[/&Omega;/g,"Ω"],[/&alpha;/g,"α"],[/&beta;/g,"β"],[/&gamma;/g,"γ"],[/&delta;/g,"δ"],[/&epsilon;/g,"ε"],[/&zeta;/g,"ζ"],[/&eta;/g,"η"],[/&theta;/g,"θ"],[/&iota;/g,"ι"],[/&kappa;/g,"κ"],[/&lambda;/g,"λ"],[/&mu;/g,"μ"],[/&nu;/g,"ν"],[/&xi;/g,"ξ"],[/&omicron;/g,"ο"],[/&pi;/g,"π"],[/&rho;/g,"ρ"],[/&sigmaf;/g,"ς"],[/&sigma;/g,"σ"],[/&tau;/g,"τ"],[/&upsilon;/g,"υ"],[/&phi;/g,"φ"],[/&chi;/g,"χ"],[/&psi;/g,"ψ"],[/&omega;/g,"ω"],[/&thetasym;/g,"ϑ"],[/&upsih;/g,"ϒ"],[/&piv;/g,"ϖ"],[/&middot;/g,"·"],[/&nbsp;/g," "],[/&quot;/g,"'"],[/&amp;/g,"&"],[/&lt;/g,"<"],[/&gt;/g,">"],[/&#8226;/g,"•"],[/&OElig;/g,"Œ"],[/&oelig;/g,"œ"],[/&Scaron;/g,"Š"],[/&scaron;/g,"š"],[/&Yuml;/g,"Ÿ"],[/&fnof;/g,"ƒ"],[/&circ;/g,"ˆ"],[/&tilde;/g,"˜"],[/&ensp;/g,""],[/&emsp;/g,""],[/&thinsp;/g,""],[/&zwnj;/g,""],[/&zwj;/g,""],[/&lrm;/g,""],[/&rlm;/g,""],[/&ndash;/g,"–"],[/&mdash;/g,"—"],[/&lsquo;/g,"‘"],[/&rsquo;/g,"’"],[/&sbquo;/g,"‚"],[/&ldquo;/g,"“"],[/&rdquo;/g,"”"],[/&bdquo;/g,"„"],[/&dagger;/g,"†"],[/&Dagger;/g,"‡"],[/&bull;/g,"•"],[/&hellip;/g,"…"],[/&permil;/g,"‰"],[/&prime;/g,"′"],[/&Prime;/g,"″"],[/&lsaquo;/g,"‹"],[/&rsaquo;/g,"›"],[/&oline;/g,"‾"],[/&euro;/g,"€"],[/&trade;/g,"™"],[/&larr;/g,"←"],[/&uarr;/g,"↑"],[/&rarr;/g,"→"],[/&darr;/g,"↓"],[/&harr;/g,"↔"],[/&crarr;/g,"↵"],[/&lceil;/g,"⌈"],[/&rceil;/g,"⌉"],[/&lfloor;/g,"⌊"],[/&rfloor;/g,"⌋"],[/&loz;/g,"◊"],[/&spades;/g,"♠"],[/&clubs;/g,"♣"],[/&hearts;/g,"♥"],[/&diams;/g,"♦"],[/&#39;/g,"'"],[/\r\n/g,""],[/\n/g,""]];module.exports=class{config;constructor(e,t){return this.config=t?{defaultConfig:n,...t}:n,e?this.steps(e):""}steps(e){const t=this.decodeHtml(e),s=this.htmlToJson(t);return this.jsonToSkeleton(s)}decodeHtml(e){return e?(u.forEach((t=>{const[s,i]=t;e=e.replace(s,i)})),e):""}isInvalidElement(t){return e.includes(t)||this.config.ignoredElement.includes(t)}isSelfClosingElement(e,s){return o.test(e)||t.includes(s)}formatAttributes(e,t){if(!e)return{};const s=this;let i={};e.replace(l,(function(e,g,n){const r=Array.prototype.slice.call(arguments);if(r.length>=3){const e=n?n.replace(/(^|[^\\])"/g,'$1\\"'):"";s.attributeProcessor(i,g,e,t)}return""}));let g={};const n=this.config[t];return"buildInAttrs"in n&&(g=n.buildInAttrs),{...i,...g}}attributeProcessor(e,t,s,i){const g=this.config[i],{validAttrs:n}=g,r=Array.isArray(n)&&n.includes(t);if(!n||r){const{format:i={}}=g,n=i[t];e[t]=n?n(s):s}}formatElementName(e){return g.includes(e)?i[e]:"view"}updateHtmlStr(e,t){return e.substring(t.length)}htmlToJson(e){const i=Date.now()+this.config.timeout,g=[];for(;e;){if(0===e.indexOf("</")){const s=e.match(a);if(!s)continue;const[i,n]=s,r=this.updateHtmlStr(e,i);if(this.isInvalidElement(n)){e=r;continue}e=r;const o=t.includes(n);g.push({type:o?"selfClosing":"end",name:this.formatElementName(n),originName:n});continue}if(0===e.indexOf("<")){const t=e.match(r);if(!t)continue;const[i,n,a=""]=t,o=this.updateHtmlStr(e,i);if(this.isInvalidElement(n)){e=o;continue}e=o;const l=this.isSelfClosingElement(i,n),u=this.formatElementName(n),c=this.formatAttributes(a,u);let m=s.includes(n)?"block":"inline";g.push({type:l?"selfClosing":"start",name:u,originName:n,attrs:c,display:m});continue}const n=e.indexOf("<"),o=n<0,l=this.config.text;let u=o?e:e.substring(0,n);e=o?"":e.substring(n);const c={};if(this.attributeProcessor(c,"text",u,"text"),g.push({type:"text",name:"text",text:c.text,attrs:{...l.buildInAttrs}}),Date.now()>=i)break}return g}skeletonGenerator(e,t=0){if(e.length<=0)return[];let s=0;const i=[];for(;s<e.length;){const g=e[s],n=`${t}_${s}_${g.name}`,r=["start","end"].includes(g.type)?"default":g.type;if("start"===g.type){const t=e.findIndex((({type:e,genKey:t})=>"end"===e&&t===g.genKey));i.push({id:n,...g,type:r,children:this.skeletonGenerator(e.slice(s+1,t),s)}),s=t+1}else i.push({id:n,...g,type:r}),s++}return i}jsonToSkeleton(e){const t=[];return e.forEach(((e,s)=>{const{type:i}=e;switch(i){case"start":e.genKey=s,t.push(s);break;case"end":const i=t.splice(t.length-1,1)[0];e.genKey=i}})),this.skeletonGenerator(e)}};
